# -*- coding: utf-8 -*-
"""StudentPerformance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12uWCt_8F1z5BQV5bo5G1zBX_lqWB52N5
"""

#Gerekli Kütüphaneler Dahil Edildi
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
from sklearn.model_selection import cross_val_score

df= pd.read_excel('Student_Performance.xlsx')  #veri seti dahil edildi

df.head(3)  #veri setinin ilk üç değeri getirildi

df.tail(3)  #veri setinin son üç değeri getirildi

df.info()  #data hakkında bilgi alındı

df.columns

df.shape   #bu fonksiyon bize veri setinin kaç satır ve sütün içerdiğini verir

df.describe().T  #data hakkında bize özet bilgiler verir

df.isnull().values.any()  #data da boş yani null değer varmı

df.isnull().sum()   #data da bulunan boş yerlerin toplamını bize verir

df = df.drop(0, axis=0 )     #satırdaki 0 değerinin silinmesini sağlar

df.head(3)

df[(df["Previous Scores"] > 70) & (df["Hours Studied"] >= 5)].head()    #Previous Scores değeri 70 üzeri olan ve Hours Studied değeri 5'e eşit ve üstünde olanları getir

df[(df["Previous Scores"] > 70) & (df["Hours Studied"] >= 5)]["Previous Scores"].count() #Previous Scores değeri 70 üzeri olan ve Hours Studied değeri 5'e eşit ve üstünde olanların sayısın bana getir

df[df["Performance Index"] <50]["Performance Index"].count()   #Performance Index değeri 50'nin altında olanların kaç kişi olduğunu bana getir

df["Extracurricular Activities"].value_counts().plot(kind='bar', color='pink', edgecolor='black')   #kategorik bir değişkeni sütun grafik ile gösterimi(kategorik değişkenlerin gösteriminide genellikle sütun grafiği kullanılır)
plt.title("Dışarıdan Aktivitelerin Dağılımı", fontsize=15, fontweight='bold', color= 'darkviolet')
plt.xlabel("Aktiviteler", fontsize=12)
plt.ylabel("Frekans", fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=50, fontsize=12)
plt.yticks(fontsize=11)
plt.show()

plt.hist(df["Hours Studied"], bins=10, edgecolor='black', color='pink')
plt.title("Çalışma Saatlerinin Dağılımı", fontsize=15, fontweight='bold', color= 'darkviolet')
plt.xlabel("Çalışılan Saatler", fontsize=12)
plt.ylabel("Frekans", fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

plt.boxplot(df["Performance Index"], patch_artist=True,
            boxprops=dict(facecolor='pink', color='deeppink'),
            capprops=dict(color='pink'),
            whiskerprops=dict(color='pink'),
            flierprops=dict(marker='o', color='red', alpha=0.5),
            medianprops=dict(color='darkviolet'))
plt.title("Performans İndeksi Dağılımı", fontsize=15, fontweight='bold', color= 'darkviolet')
plt.ylabel("Performans İndeksi", fontsize=12)
plt.xticks([1], ['Performans İndeksi'], fontsize=12)
plt.grid(axis='y', linestyle='dashdot', alpha=0.7, color='r')
plt.show()

sns.boxplot(x = df["Performance Index"], color= 'pink')
plt.grid()
plt.show()

df["Performance Index"].hist(color= 'pink', bins= 10, edgecolor='black')
plt.title("Performans Gösteriminin Histogram Grafiği", color= 'deeppink', fontsize= 12, fontweight= 'bold')
plt.xlabel("Performans", fontsize= 11)
plt.xticks(fontsize= 9, rotation= 50, fontweight= 'bold')
plt.grid(None)
plt.show()

df = pd.get_dummies(df, columns=['Extracurricular Activities'], drop_first=True)  #gerekli düzenlemeler yapıldı

y = df[['Performance Index']]                 #bağımlı ve bağımsız değişkenler belirlendi
x = df.drop("Performance Index",axis=1)

x_train,x_test,y_train,y_test= train_test_split(x,y, random_state=21, train_size=0.70)   #train ve test diye ayrım yapılarak güvenilirliği
#artırmış olduk

lm = LinearRegression().fit(x_train,y_train)  #model kuruldu

lm.coef_  #veri seti içindeki değerlerin katsayıları bulundu

lm.intercept_  #modelin sabit değeri bulundu

lm.score(x_test,y_test)   #model skoru görüldü

lm.predict(x_train)[0:10]  #burada tahminlerden ilk on tanesini gözlemlemiş olduk

mean_squared_error(y_train,lm.predict(x_train))  #hata metriği uygulandı (train hatası bulundu)

mean_squared_error(y_test,lm.predict(x_test))    #hata metriği uygulandı   (test hatası bulundu)

cross_val_score(lm, x_train, y_train, cv = 10, scoring="neg_mean_squared_error")   #train seti üzerinden on tane farklı hata hesaplaması yapıldı

np.mean(-cross_val_score(lm, x_train, y_train, cv = 10, scoring="neg_mean_squared_error"))   #ortalama hatayı bulmuş olduk

mean_absolute_percentage_error(y_test,lm.predict(x_test))  #hata metriği uygulandı  (test hatası bulundu)

mean_absolute_error(y_test,lm.predict(x_test))  #hata metriği uygulandı  (test hatası bulundu)

mean_absolute_error(y_train,lm.predict(x_train))  #hata metriği uygulandı  (train hatası bulundu)

mean_absolute_percentage_error(y_train,lm.predict(x_train))  #hata metriği uygulandı  (train hatası bulundu)

